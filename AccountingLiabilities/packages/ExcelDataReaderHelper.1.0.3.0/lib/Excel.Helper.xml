<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Excel.Helper</name>
    </assembly>
    <members>
        <member name="T:Excel.Helper.ExcelDataReaderHelper">
            <summary>
            ExcelDataReader Helper class that gives simmilar functionality you get from LinqToExcel but without needing the ACE or JET driver.
            Advantages:
            - ExcelDataReader used for very good performance. (Nuget: Install-Package ExcelDataReader)
            - Automatically choosing between BinaryReader and OpenXmlReader (simple detection using file extension)
            - Easy to select a worksheet by index or worksheet name.
            - Read multiple blocks of data and from multiple worksheets without the need to close the file in between.
            - Mapping to object properties using a simple convention of having the first row contain headers to be converted into propertynames by replacing/removing the invalid identifier characters. (by default invalid characters are removed)
            Disadvantages:
            - No support for writing to excel files
            </summary></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.Filename">
            <summary>
            Gets the filename.
            </summary>
            <value>The filename.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.InvalidIdentifierCharacterReplacement">
            <summary>
            Used to replace invalid characters from header values when mapping cell values to object properties.
            </summary></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.SuppressExcelDataReaderHelperException">
            <summary>
            When true ExcelDataReaderHelperExceptions are suppressed when mapping data directly to objects for these situations:
            1. A header is empty (no property name for this column and the value is ignored).
            2. Property type mismatch. (The value could not be cast to the property type)
            </summary></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Excel.Helper.ExcelDataReaderHelper" /> class.
            </summary>
            <param name="filename">Filename of the excel file.</param></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.#ctor(System.IO.Stream,Excel.Helper.ExcelFileFormat,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Excel.Helper.ExcelDataReaderHelper" /> class.
            </summary>
            <param name="excelStream">Excel stream.</param>
            <param name="excelFileFormat">Excel file format (will try to autodetect unknown format)</param>
            <param name="isStreamOwner">If set to <c>true</c> is stream owner and will take care of disposing the stream.</param></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRangeCells(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads a jagged array of cells (rows and columns) from a given worksheet.
            </summary>
            <param name="worksheetName">Name of the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Jagged array with cell objects.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRangeCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads a jagged array of cells (rows and columns) from a given worksheet.
            </summary>
            <param name="worksheetIndex">Zero based index of the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Jagged array with cell objects.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRangeCells``1(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads a jagged array of cells (rows and columns) from a given worksheet converted to type T.
            </summary>
            <param name="worksheetName">Name of the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Jagged array with each cell converted to type T.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRangeCells``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads a jagged array of cells (rows and columns) from a given worksheet converted to type T.
            </summary>
            <param name="worksheetIndex">Zero based index of the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Jagged array with each cell converted to type T.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRange``1(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads rows and columns from a given worksheet and creates new objects of type T with row values mapped to properties based on the header.
            The first row needs to be a header that contains the the properynames of type T after replacing all invalid identifier characters.
            </summary>
            <param name="worksheetName">Name of the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Array with object of type T with row values mapped to properties.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRange``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads rows and columns from a given worksheet and creates new objects of type T with row values mapped to properties based on the header.
            The first row needs to be a header that contains the the properynames of type T after replacing all invalid identifier characters.
            </summary>
            <param name="worksheetIndex">Zero based index of the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Array with object of type T with row values mapped to properties.</returns></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.WorksheetCount">
            <summary>
            Gets the worksheet count.
            </summary>
            <value>The worksheet count.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.WorksheetNames">
            <summary>
            Gets the worksheet names.
            </summary>
            <value>The worksheet names.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.ExcelFileFormat">
            <summary>
            Gets the excel file format which is either ExcelFileFormat.OpenXML or ExcelFileFormat.Binary.
            ExcelFileFormat.Unknown will be resolved.
            </summary>
            <value>The excel file format.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.InternalStream">
            <summary>
            Gets the internal stream.
            Ensures the internalStream is initialized and seekable. If not set to be the stream owner or initialized with a non seekable
            stream, the stream is copied into a memory stream to ensure the stream is not closed and/or the operations ExcelDataReader
            needs to perform won't throw an exception.
            </summary>
            <value>The internal stream.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.ExcelDataReader">
            <summary>
            Gets the excel data reader.
            </summary>
            <value>The excel data reader.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.DataTables">
            <summary>
            Gets the data tables of the excel workbook.
            </summary>
            <value>The data tables.</value></member>
        <member name="P:Excel.Helper.ExcelDataReaderHelper.ExcelDataSet">
            <summary>
            Gets the excel data set of the workbook.
            </summary>
            <value>The excel data set.</value></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.IsZipStream(System.IO.Stream)">
            <summary>
            Determines if the stream contains zip content.
            The stream position will be reset to the beginning of the stream when the method returns.
            </summary>
            <param name="stream">The stream to check. The stream must be seekable.</param>
            <returns><c>true</c> if this is a zip stream; otherwise, <c>false</c>.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRangeCells(System.Func{System.Data.DataTableCollection,System.Data.DataTable},System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads a jagged array of cells (rows and columns) from a worksheet selected using a given function.
            </summary>
            <param name="dataTableSelector">Function for selecting the worksheet.</param>
            <param name="startColumnNumber">Column number to start at with the first column beeing 1.</param>
            <param name="startRowNumber">Row number to start at with the first row beeing 1.</param>
            <param name="numberOfColumns">Number of columns to return, adding NULL values if the actual number of columns is less. 0 indicates reading all columns available.</param>
            <param name="numberOfRows">Number of rows to return, adding rows with all NULL values if the actual number of rows is less. 0 indicates reading all columns available</param>
            <param name="removeEmptyRows">Removes any empty row encountered. This option somewhat contradicts with <paramref name="numberOfRows" /> when true and <paramref name="numberOfRows" /> not is 0, because no empty rows will be added to match <paramref name="numberOfRows" />.</param>
            <returns>Jagged array with cell objects.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.ReplaceInvalidIdentifierCharacters(System.String)">
            <summary>
            Replaces invalid characters in a given string to create a valid identifier.
            </summary>
            <param name="s">The string that might contain invalid identifier characters</param>
            <returns>A new string with invalid identifier characters replaced. <see cref="!:INVALID_IDENTIFIER_CHAR_REPLACEMENT" /></returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.CellHeaderObjectAsIdentifier(System.Object)">
            <summary>
            Returns a cell object as identifier character. Used to convert header cells into identifiers.
            </summary>
            <param name="o">cell object</param>
            <returns>valid identifier (or empty string if the cell is empty or only contains invalid characters)</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.GetRange``1(System.Object[][])">
            <summary>
            Converts a jagged array to an array of type T. The first row of <paramref name="cells" /> is  treated as the header and converted to
            valid identifiers. Those identifiers are then used to match the properties of each object of T created.
            </summary>
            <typeparam name="T">Requested result type.</typeparam>
            <param name="cells">source cells to convert to objects of T with the first row containing headers that match the properties of T (after replacing any invalid identifier character).</param>
            <returns>Array of T as result of converting each row</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.ThrowExcelDataReaderHelperException(System.String,System.Object[])">
            <summary>
            Throws an ExcelDataReaderHelperException when not suppressed
            </summary>
            <param name="messageFmt">Message with formatting.</param>
            <param name="args">Zero or more objects to format.</param></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.Cast(System.Object,System.Type)">
            <summary>
            Cast an object to a given type with respect to null values.
            NULL and DBNull are cast to a nullable of <paramref name="type" />.
            For type DateTime the DateTime.FromOADate is used when the excel file is in binary format.
            </summary>
            <param name="obj">Object to cast.</param>
            <param name="type">Result type after casting.</param>
            <returns>object casted to type.</returns></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelper.TrySetProperty(System.Object,System.String,System.Object)">
            <summary>
            Try to set a property of a given object with a value and automatically will cast the given value to the type of the property.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The new value of the property.</param>
            <returns>True, if the property could be set. False, otherwise.</returns></member>
        <member name="T:Excel.Helper.ExcelFileFormat">
            <summary>
            Excel file format.
            </summary></member>
        <member name="F:Excel.Helper.ExcelFileFormat.Unknown">
            <summary>
            Unknown excel file format.
            </summary></member>
        <member name="F:Excel.Helper.ExcelFileFormat.Binary">
            <summary>
            Binary excel file format (.xls)
            </summary></member>
        <member name="F:Excel.Helper.ExcelFileFormat.OpenXML">
            <summary>
            Open XML file format (.xlsx)
            </summary></member>
        <member name="T:Excel.Helper.ExcelDataReaderHelperException">
            <summary>
            Excel data reader helper exception.
            </summary></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Excel.Helper.ExcelDataReaderHelperException" /> class.
            </summary>
            <param name="message">Message.</param></member>
        <member name="M:Excel.Helper.ExcelDataReaderHelperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Excel.Helper.ExcelDataReaderHelperException" /> class.
            </summary>
            <param name="message">Message.</param>
            <param name="innerException">Inner exception.</param></member>
    </members>
</doc>
